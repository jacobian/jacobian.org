name: test
on: [pull_request, push]
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - uses: actions/cache@v1
        id: poetry-install-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-poetry-install-cache-1.0.3
          restore-keys: ${{ runner.os }}-poetry-install-cache-

      - name: install poetry
        if: steps.poetry-install-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.0.3

      - uses: actions/cache@v1
        id: poetry-deps-cache
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-deps-cache-${{ hashFiles('**/poetry.lock') }}

      - name: install dependencies
        if: steps.poetry-deps-cache.outputs.cache-hit != 'true'
        run: python -m poetry install

      - name: collectstatic
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres"
          SECRET_KEY: "for-testing"
        run: |
          poetry run python manage.py collectstatic --noinput

      - name: pytest
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres"
          SECRET_KEY: "for-testing"
        run: |
          python -m poetry run pytest
